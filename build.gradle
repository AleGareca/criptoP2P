plugins {
	id 'org.springframework.boot' version '2.7.5'
	id 'io.spring.dependency-management' version '1.0.14.RELEASE'
	id 'java'
	id "org.sonarqube" version "3.4.0.2513"
	id 'jacoco'
}
apply plugin: "org.sonarqube"
apply plugin: 'java'
apply plugin: 'io.spring.dependency-management'
group = 'com.unq.desa'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	implementation group: 'org.springframework.plugin', name: 'spring-plugin-core', version: '2.0.0.RELEASE'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.2'
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.11'
	implementation group: 'io.springfox', name: 'springfox-swagger2', version: '3.0.0'
	implementation group: 'io.springfox', name: 'springfox-swagger-ui', version: '3.0.0'
	implementation 'org.springframework.plugin:spring-plugin-core:2.0.0.RELEASE'
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '3.1.0'
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '2.7.4'
	implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '3.1.4'

}
compileJava.options.encoding = 'utf-8'
compileTestJava.options.encoding = 'utf-8'

jacocoTestReport {
	dependsOn test
	reports {
		xml.enabled true
		html.enabled true
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/webservice/**',
										'**/common/**',
										'**/config/**',
										'**/persistence/**',
										'**/model/**'])
		}))
	}
	finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: ['**/webservice/**',
										'**/common/**',
										'**/config/**',
										'**/persistence/**',
										'**/model/**'])
		}))
	}
	violationRules {
		rule {
			enabled = true
			limit {
				minimum = 0.0
			}
		}
	}
}
tasks.named('test') {
	useJUnitPlatform()
}
test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

sonarqube {
	properties {
		property "sonar.projectKey", "AleGareca_criptoP2P"
		property "sonar.organization", "alegareca"
		property "sonar.host.url", "https://sonarcloud.io"
	}
}
